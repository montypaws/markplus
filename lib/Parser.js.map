{"version":3,"sources":["../src/Parser.js"],"names":["Element","size","line","params","at","type","constructor","name","lines","push","length","JSON","stringify","json","Invalid","reason","Save","splited","Parser","Function","body","split","trim","args","exec","hold","extra","slice","map","ele","dump","join","linesResult","fn","startsWith","Load","HTMLElement","pipe","expr","Comments","tag","html","Plain","class","Header","level","content","scopes","nestable","nonested","regex","cursor","nestableClose","nonestedClose","index","Array","from","findIndex","char","nonestedFound","find","symbol","nestableIndex","indexOf","unshift","shift","matched","match","holdSize","parseInt","$","o","repeat","parse","elements","forEach","completed","reverse"],"mappings":"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","file":"Parser.js","sourcesContent":["export class Element {\r\n    constructor(size: number, line: string, params: any, at: number) {\r\n        this.type = this.constructor.name;\r\n        this.size = size;\r\n        const lines: [string | Element] = [line];\r\n        this.lines = lines;\r\n        this.params = params;\r\n        this.at = at;\r\n    }\r\n    push(line: string, at: number) { // eslint-disable-line no-unused-vars\r\n        this.lines.push(line);\r\n    }\r\n    completed(line: string, at: number) { // eslint-disable-line no-unused-vars\r\n        return this.size == this.lines.length;\r\n    }\r\n    get json() { return this; }\r\n    dump() { return `register(${this.at}, ${JSON.stringify(this.json)});`; }\r\n}\r\nexport class Invalid extends Element {\r\n    constructor(line: string, reason: string, at: number) {\r\n        super(1, line, { reason }, at);\r\n    }\r\n    dump() { return `console.error(${JSON.stringify(this)});`; }\r\n}\r\nexport class Save extends Element {\r\n    push(line: string, at: number) { // eslint-disable-line no-unused-vars\r\n        const splited = Parser.Function.body.split(line.trim());\r\n        if (!splited) {\r\n            this.lines.push(new Invalid(line, `child function of (${this.params.name}) syntax invalid.`));\r\n            return;\r\n        }\r\n        const { args, exec, hold, extra } = splited;\r\n        if (exec) {\r\n            this.lines.push(new Invalid(line, 'multi-lines functions cannot have immediately child function.'));\r\n            return;\r\n        }\r\n        if (hold) {\r\n            this.lines.push(new Invalid(line, 'nested multi-lines functions not support.'));\r\n            return;\r\n        }\r\n        this.lines.push(new Save(1, line, { args, extra }, at));\r\n    }\r\n    dump() {\r\n        const { name, args, exec, extra = '' } = this.params;\r\n        const lines = this.size == 1 ? ''\r\n            : `    ${[\r\n                'let result;',\r\n                ...this.lines.slice(1)\r\n                    .map(ele => ele instanceof Invalid ? `() => ${ele.dump()}` : ele.params)\r\n                    .map(({ args, extra = '' }) => `result = (${args || '()'} => (\\n        ${extra}\\n    ))(result);`),\r\n            ].join('\\n    ')}\\n`;\r\n        const linesResult = this.size == 1 ? '' : 'result';\r\n        const fn = `function ${args || '()'} {\\n${lines}    return (\\n        ${linesResult}${extra}\\n    );\\n}`;\r\n        return `${name.startsWith('_') ? '' : 'export '}const ${name} = ${exec ? `(${fn})()` : fn};`;\r\n    }\r\n}\r\nexport class Load extends Element {\r\n    push(line: string, at: number) { // eslint-disable-line no-unused-vars\r\n        if (!this.params.exec) {\r\n            this.lines.push(line);\r\n            return;\r\n        }\r\n        const ele = Parser.HTMLElement.pipe(line, at);\r\n        if (!ele) {\r\n            this.lines.push(line.slice(4));\r\n            return;\r\n        }\r\n        this.lines.push(ele);\r\n    }\r\n    dump() {\r\n        const { name, args, exec, extra = '' } = this.params;\r\n        const lines = this.size == 1 ? ''\r\n            : this.lines.slice(1).map(\r\n                exec ?\r\n                    line => line instanceof Element ?\r\n                        `${JSON.stringify(line.json)}` : line\r\n                    : line => `${JSON.stringify(line)}`\r\n            ).join(',\\n    ');\r\n        const expr = `${args ? `${name}.bind${args}` : name}(\\n    ${lines}${extra}\\n)`;\r\n        return `register(${this.at}, ${expr});`;\r\n    }\r\n}\r\nexport class Comments extends Element {\r\n    constructor(line: string, at: number) {\r\n        super(1, line, null, at);\r\n    }\r\n    get json() {\r\n        return { tag: 'span', html: `<!-- ${this.lines[0]} -->` };\r\n    }\r\n}\r\nexport class Plain extends Element {\r\n    constructor(line: string, at: number) {\r\n        super(1, line, null, at);\r\n    }\r\n    get json() {\r\n        return { tag: 'span', html: `${this.lines[0]}<br>`, class: 'Plain' };\r\n    }\r\n    dump() { return `register(${this.at}, { tag: 'span', html: '${this.lines[0]}<br>' });`; }\r\n}\r\nexport class Header extends Element {\r\n    constructor(line: string, level: number, content: string, at: number) {\r\n        super(1, line, { level, content }, at);\r\n        this.level = level;\r\n        this.content = content;\r\n    }\r\n    get json() {\r\n        return { tag: 'span', html: `${this.lines[0]}<br>`, class: `Header Header-${this.level}`, 'data-markplus-header-level': this.level };\r\n    }\r\n}\r\n\r\nconst Parser = {\r\n    Function: {\r\n        body: {\r\n            scopes: {\r\n                nestable: '()[]{}',\r\n                nonested: ['\\'\\'', '``', '\"\"', ['/*', '*/']],\r\n            },\r\n            regex: /^(\\s*\\/:?\\d+)?(.*)?$/,\r\n            split(body: string) {\r\n                const { scopes, regex } = this;\r\n                let args;\r\n                let cursor = 0;\r\n                if (body[cursor] == '(') {\r\n                    let nestableClose = [];\r\n                    let nonestedClose = null;\r\n                    const index = Array.from(body).findIndex((char, index) => {\r\n                        if (nonestedClose) {\r\n                            if (char == nonestedClose) {\r\n                                nonestedClose = null;\r\n                            }\r\n                            return false;\r\n                        }\r\n                        const nonestedFound = scopes.nonested.find(symbol => symbol[0] == char);\r\n                        if (nonestedFound) {\r\n                            nonestedClose = nonestedFound[1];\r\n                            return false;\r\n                        }\r\n                        const nestableIndex = scopes.nestable.indexOf(char);\r\n                        if (nestableIndex == -1) {\r\n                            return false;\r\n                        }\r\n                        if (nestableIndex % 2 == 0) {\r\n                            nestableClose.unshift(scopes.nestable[1 + nestableIndex]);\r\n                            return false;\r\n                        }\r\n                        if (char != nestableClose[0]) {\r\n                            return false;\r\n                        }\r\n                        nestableClose.shift();\r\n                        return nestableClose.length == 0;\r\n                    });\r\n                    if (index == -1) {\r\n                        return false;\r\n                    }\r\n                    cursor = 1 + index;\r\n                    args = body.slice(0, 1 + cursor);\r\n                }\r\n                const matched = body.slice(cursor).match(regex);\r\n                if (matched == null) {\r\n                    return false;\r\n                }\r\n                const [, hold, extra] = matched;\r\n                if (!hold) {\r\n                    if (extra[0] == '/') {\r\n                        return { args, exec: true, hold: null, extra: extra.slice(1) };\r\n                    }\r\n                    if (extra[0] == ' ') {\r\n                        return { args, exec: false, hold: null, extra: extra.slice(1) };\r\n                    }\r\n                }\r\n                const exec = hold != null && hold[0] == '/';\r\n                return { args, exec, hold: hold && hold.trim(), extra };\r\n            },\r\n        },\r\n        regex: /^([$#])([\\w.]+)(.*)?$/,\r\n        pipe(line: string, at: number) {\r\n            const match = line.match(this.regex);\r\n            if (match == null) {\r\n                return false;\r\n            }\r\n            const [, type, name, body] = match;\r\n            const splited = this.body.split(body);\r\n            if (!splited) {\r\n                return new Invalid(line, `unexpected body(${body}) `, at);\r\n            }\r\n            const { args, exec, hold, extra } = splited;\r\n            const holdSize =\r\n                hold ?\r\n                    hold[1] == ':' ?\r\n                        parseInt(hold.slice(2)) - at\r\n                        : parseInt(hold.slice(1))\r\n                    : 0;\r\n            if (holdSize < 0) {\r\n                return new Invalid(line, `unexpected size(${holdSize}), check: ${hold} `, at);\r\n            }\r\n            return new ({ $: Load, '#': Save })[type](\r\n                1 + holdSize,\r\n                line,\r\n                { name: name == '_' ? 'void' : name, args, exec, extra },\r\n                at,\r\n            );\r\n        },\r\n    },\r\n    HTMLElement: {\r\n        regex: /^(\\S*)\\s(.*)$/,\r\n        pipe(line: string, at: number) {\r\n            const match = line.match(this.regex);\r\n            if (match == null) {\r\n                return new Plain(line, at);\r\n            }\r\n            const [, type, content] = match;\r\n            const pipe = ({\r\n                ...(o => (o['#'.repeat(type.length || 1)] = content => new Header(line, type.length, content, at), o))({}),\r\n                '': () => line.startsWith('    ') ? false : new Plain(line, at), // 4 white-space means code.\r\n            })[type];\r\n            if (!pipe) {\r\n                return new Plain(line, at);\r\n            }\r\n            return pipe(content);\r\n        },\r\n    },\r\n    pipe(line: string, at: number) {\r\n        return this.Function.pipe(line, at) || this.HTMLElement.pipe(line, at) || new Invalid(line, 'Unknown syantax.', at);\r\n    },\r\n    parse(lines: [string]) {\r\n        const elements = [new Comments('https://github.com/zhengxiaoyao0716/markplus', 0)];\r\n        lines.forEach((line, index) => {\r\n            const at = 1 + index;\r\n            const ele = elements[0];\r\n            if (ele.completed(line, at)) {\r\n                elements.unshift(this.pipe(line, at));\r\n                return;\r\n            }\r\n            ele.push(line, at);\r\n        });\r\n        return elements.reverse();\r\n    },\r\n};\r\nexport default Parser;\r\n"]}