{"version":3,"sources":["../src/core.js"],"names":["Types","Render","readFileSync","join","__dirname","plugins","self","name","firstH1","elements","find","ele","Header","level","content","head","code","dump","map","pluginNames","Set","use","plugin","Error","has","console","warn","stack","replace","add","push","forEach","Markplus","ps","action","p","filter","from","Promise","resolve","reject","lines","Array","split","endsWith","parse"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;IAAoBA,K;;AACpB;;;;;;;;;;;;AAEA,IAAMC,SAAS,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,oBAArB,CAAhB,EAA4D,OAA5D,CAAf;AACA,IAAMC,UAAU,CACZ,UAACC,IAAD,EAAoB;AAChB,QAAI,CAACA,KAAKC,IAAV,EAAgB;AACZ,YAAMC,UAAwBF,KAAKG,QAAL,CAAcC,IAAd,CAAmB;AAAA,mBAAOC,eAAeX,MAAMY,MAArB,IAA+BD,IAAIE,KAAJ,IAAa,CAAnD;AAAA,SAAnB,CAA9B;AACAP,aAAKC,IAAL,GAAYC,gBAAcA,QAAQM,OAAlC;AACH;AACD,WAAO;AACHC,cAAM;AAAA,6BAAcT,KAAKC,IAAnB;AAAA,SADH;AAEHS,cAAM;AAAA,mBAAMf,MAAN;AAAA,SAFH;AAGHgB,cAAM;AAAA,mBAAM,6BACLX,KAAKG,QAAL,CAAcS,GAAd,CAAkB;AAAA,uBAAOP,IAAIM,IAAJ,EAAP;AAAA,aAAlB,CADK,iCAEkBX,KAAKC,IAFvB,WAGVJ,IAHU,CAGL,IAHK,CAAN;AAAA;AAHH,KAAP;AAQH,CAdW,CAAhB;AAgBA,IAAMgB,cAAc,IAAIC,GAAJ,EAApB;AACO,IAAMC,oBAAM,SAANA,GAAM,CACfC,MADe,EAMd;AACD,QAAMf,OAAOe,OAAOf,IAApB;AACA,QAAI,CAACA,IAAL,EAAW;AACP,cAAM,IAAIgB,KAAJ,CAAU,iBAAV,CAAN;AACH;AACD,QAAIJ,YAAYK,GAAZ,CAAgBjB,IAAhB,CAAJ,EAA2B;AACvBkB,gBAAQC,IAAR,CAAa,IAAIH,KAAJ,mBAA0BhB,IAA1B,kBAA6CoB,KAA7C,CAAmDC,OAAnD,CAA2D,QAA3D,EAAqE,SAArE,CAAb,EADuB,CACwE;AAClG;AACDT,gBAAYU,GAAZ,CAAgBtB,IAAhB;AACAF,YAAQyB,IAAR,CAAaR,MAAb;AACH,CAhBM;;AAkBP,uBAEES,OAFF,CAEUV,GAFV;;IAIqBW,Q,GAOjB,kBAAYvB,QAAZ,EAAuCF,IAAvC,EAAsD;AAAA;;AAAA;;AAAA;;AAClD,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,QAAM0B,KAAK5B,QAAQa,GAAR,CAAY;AAAA,eAAUI,aAAV;AAAA,KAAZ,CAAX;AACA,SAAKA,MAAL,GAAc,UAACY,MAAD;AAAA,eAA4BD,GAAGf,GAAH,CAAO;AAAA,mBAAKiB,EAAED,MAAF,KAAaC,EAAED,MAAF,GAAlB;AAAA,SAAP,EAAsCE,MAAtC,CAA6C;AAAA,mBAAQpB,QAAQ,IAAhB;AAAA,SAA7C,CAA5B;AAAA,KAAd;AACH,C;;AAZgBgB,Q,CACVK,I,GAAO,UAACvB,OAAD;AAAA,WAAmD,IAAIwB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9F,YAAMC,QAAQ3B,mBAAmB4B,KAAnB,GAA2B5B,OAA3B,GAAqCA,QAAQ6B,KAAR,CAAc7B,QAAQ8B,QAAR,CAAiB,MAAjB,IAA2B,MAA3B,GAAoC,IAAlD,CAAnD;AACA,YAAMnC,WA9CMT,KA8CK,SAAO6C,KAAP,CAAaJ,KAAb,CAAjB;AACAF,gBAAQ,IAAIP,QAAJ,CAAavB,QAAb,CAAR;AACH,KAJgE,CAAnD;AAAA,C;;;;;SAadO,I,GAAO;AAAA,eAAO,CACV,gBADU,4BAEP,OAAKM,MAAL,CAAY,MAAZ,CAFO,IAGV,gBAHU,sBAIP,OAAKA,MAAL,CAAY,MAAZ,CAJO,GAKZnB,IALY,CAKP,IALO,CAAP;AAAA,K;;;kBAdU6B,Q","file":"core.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\n\r\nimport Parser, * as Types from './Parser';\r\nimport PluginRenderCode from './plugin/render-code';\r\n\r\nconst Render = fs.readFileSync(path.join(__dirname, './../src/Render.js'), 'utf-8');\r\nconst plugins = [\r\n    (self: Markplus) => {\r\n        if (!self.name) {\r\n            const firstH1: Types.Header = self.elements.find(ele => ele instanceof Types.Header && ele.level == 1);\r\n            self.name = firstH1 && `${firstH1.content}`;\r\n        }\r\n        return {\r\n            head: () => `<!-- ${self.name} -->`,\r\n            code: () => Render,\r\n            dump: () => [\r\n                ...self.elements.map(ele => ele.dump()),\r\n                `\\nexport const name = '${self.name}';`,\r\n            ].join('\\n'),\r\n        };\r\n    },\r\n];\r\nconst pluginNames = new Set();\r\nexport const use = (\r\n    plugin: (self: Markplus) => {\r\n        head: () => string,\r\n        code: () => string,\r\n        dump: () => string,\r\n    }\r\n) => {\r\n    const name = plugin.name;\r\n    if (!name) {\r\n        throw new Error('Invalid plugin.');\r\n    }\r\n    if (pluginNames.has(name)) {\r\n        console.warn(new Error(`plugin name (${name}) conflict.`).stack.replace(/^Error/, 'Warning')); // eslint-disable-line no-console\r\n    }\r\n    pluginNames.add(name);\r\n    plugins.push(plugin);\r\n};\r\n\r\n[\r\n    PluginRenderCode,\r\n].forEach(use);\r\n\r\nexport default class Markplus {\r\n    static from = (content: string | [string]): Promise<Markplus> => new Promise((resolve, reject) => {\r\n        const lines = content instanceof Array ? content : content.split(content.endsWith('\\r\\n') ? '\\r\\n' : '\\n');\r\n        const elements = Parser.parse(lines);\r\n        resolve(new Markplus(elements));\r\n    });\r\n\r\n    constructor(elements: [Types.Element], name?: string) {\r\n        this.elements = elements;\r\n        this.name = name;\r\n        const ps = plugins.map(plugin => plugin(this));\r\n        this.plugin = (action: string): string => ps.map(p => p[action] && p[action]()).filter(code => code != null);\r\n    }\r\n\r\n    code = () => ([\r\n        '\\n/* code */\\n',\r\n        ...this.plugin('code'),\r\n        '\\n/* dump */\\n',\r\n        ...this.plugin('dump'),\r\n    ].join('\\n'));\r\n}\r\n"]}