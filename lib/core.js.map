{"version":3,"sources":["../src/core.js"],"names":["Types","Render","readFileSync","join","__dirname","CorePlugin","self","name","firstH1","elements","find","ele","Header","level","content","Date","getTime","head","code","version","dump","map","corePlugins","Markplus","opts","plugin","pluginNames","Set","plugins","payload","Function","require","default","Error","has","console","warn","stack","replace","add","action","p","filter","from","Promise","resolve","reject","lines","Array","split","endsWith","parse"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;IAAoBA,K;;AACpB;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMC,SAAS,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,oBAArB,CAAhB,EAA4D,OAA5D,CAAf;AACA,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAoB;AACnC,QAAI,CAACA,KAAKC,IAAV,EAAgB;AACZ,YAAMC,UAAwBF,KAAKG,QAAL,CAAcC,IAAd,CAAmB;AAAA,mBAAOC,eAAeX,MAAMY,MAArB,IAA+BD,IAAIE,KAAJ,IAAa,CAAnD;AAAA,SAAnB,CAA9B;AACAP,aAAKC,IAAL,GAAYC,eAAaA,QAAQM,OAArB,SAAqC,IAAIC,IAAJ,GAAWC,OAAX,EAAjD;AACH;AACD,WAAO;AACHC,cAAM;AAAA,uCAAwBX,KAAKC,IAA7B;AAAA,SADH;AAEHW,cAAM;AAAA,mBAASjB,MAAT,uDAA8D,kBAAIkB,OAAlE;AAAA,SAFH;AAGHC,cAAM;AAAA,mBAAM,8BACkBd,KAAKC,IADvB,oCAELD,KAAKG,QAAL,CAAcY,GAAd,CAAkB;AAAA,uBAAOV,IAAIS,IAAJ,EAAP;AAAA,aAAlB,CAFK,GAGVjB,IAHU,CAGL,IAHK,CAAN;AAAA;AAHH,KAAP;AAQH,CAbD;AAcA,IAAMmB,cAAc,CAChBjB,UADgB,gDAApB;;IAcqBkB,Q,GAOjB,kBAAYd,QAAZ,EAAuCF,IAAvC,EAAqDiB,IAArD,EAAoE;AAAA;;AAAA;;AAAA;;AAChE,SAAKf,QAAL,GAAgBA,QAAhB;AACA,SAAKF,IAAL,GAAYA,IAAZ;;AAEA,SAAKkB,MAAL,GAAe,YAAM;AACjB,YAAMC,cAAc,IAAIC,GAAJ,EAApB;AACA,YAAMC,UAAU,UAAIN,WAAJ,qBAAoBE,KAAKC,MAAL,IAAe,EAAnC,GAAuCJ,GAAvC,CAA2C,mBAAW;AAClE,gBAAMI,SAAiBI,mBAAmBC,QAAnB,GAA8BD,OAA9B,GAAwCE,6BAA2BF,OAA3B,EAAsCG,OAArG;AACA,gBAAMzB,OAAOkB,OAAOlB,IAApB;AACA,gBAAI,CAACA,IAAL,EAAW;AACP,sBAAM,IAAI0B,KAAJ,CAAU,iBAAV,CAAN;AACH;AACD,gBAAIP,YAAYQ,GAAZ,CAAgB3B,IAAhB,CAAJ,EAA2B;AACvB4B,wBAAQC,IAAR,CAAa,IAAIH,KAAJ,mBAA0B1B,IAA1B,kBAA6C8B,KAA7C,CAAmDC,OAAnD,CAA2D,QAA3D,EAAqE,SAArE,CAAb,EADuB,CACwE;AAClG;AACDZ,wBAAYa,GAAZ,CAAgBhC,IAAhB;AACA,mBAAOkB,MAAP;AACH,SAXe,EAWbJ,GAXa,CAWT;AAAA,mBAAUI,aAAV;AAAA,SAXS,CAAhB;AAYA,eAAO,UAACe,MAAD;AAAA,mBAA4BZ,QAAQP,GAAR,CAAY;AAAA,uBAAKoB,EAAED,MAAF,KAAaC,EAAED,MAAF,GAAlB;AAAA,aAAZ,EAA2CE,MAA3C,CAAkD;AAAA,uBAAQxB,QAAQ,IAAhB;AAAA,aAAlD,CAA5B;AAAA,SAAP;AACH,KAfa,EAAd;AAgBH,C;;AA3BgBK,Q,CACVoB,I,GAAO,UAAC7B,OAAD,EAA6BP,IAA7B,EAA4CiB,IAA5C;AAAA,WAAkF,IAAIoB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7H,YAAMC,QAAQjC,mBAAmBkC,KAAnB,GAA2BlC,OAA3B,GAAqCA,QAAQmC,KAAR,CAAcnC,QAAQoC,QAAR,CAAiB,MAAjB,IAA2B,MAA3B,GAAoC,IAAlD,CAAnD;AACA,YAAMzC,WArCMT,KAqCK,SAAOmD,KAAP,CAAaJ,KAAb,CAAjB;AACAF,gBAAQ,IAAItB,QAAJ,CAAad,QAAb,EAAuBF,QAAQ,EAA/B,EAAmCiB,QAAQ,EAA3C,CAAR;AACH,KAJ+F,CAAlF;AAAA,C;;;;;SA4BdN,I,GAAO;AAAA,eAAO,CACV,gBADU,4BAEP,OAAKO,MAAL,CAAY,MAAZ,CAFO,IAGV,gBAHU,sBAIP,OAAKA,MAAL,CAAY,MAAZ,CAJO,GAKZtB,IALY,CAKP,IALO,CAAP;AAAA,K;;;kBA7BUoB,Q","file":"core.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\n\r\nimport Parser, * as Types from './Parser';\r\nimport PluginRenderCode from './plugin/render-code';\r\nimport PluginRenderPromise from './plugin/render-promise';\r\nimport pkg from './../package.json';\r\n\r\nconst Render = fs.readFileSync(path.join(__dirname, './../src/Render.js'), 'utf-8');\r\nconst CorePlugin = (self: Markplus) => {\r\n    if (!self.name) {\r\n        const firstH1: Types.Header = self.elements.find(ele => ele instanceof Types.Header && ele.level == 1);\r\n        self.name = firstH1 ? `${firstH1.content}` : `_${new Date().getTime()}`;\r\n    }\r\n    return {\r\n        head: () => `<!-- Markplus: ${self.name} -->`,\r\n        code: () => `${Render}Markplus.__defineGetter__('version', () => '${pkg.version}');\\n`,\r\n        dump: () => [\r\n            `\\nexport const name = '${self.name}';`,\r\n            ...self.elements.map(ele => ele.dump()),\r\n        ].join('\\n'),\r\n    };\r\n};\r\nconst corePlugins = [\r\n    CorePlugin,\r\n    PluginRenderCode,\r\n    PluginRenderPromise,\r\n];\r\nexport type Plugin = (self: Markplus) => {\r\n    head: () => string,\r\n    code: () => string,\r\n    dump: () => string,\r\n};\r\nexport type Options = {\r\n    plugin: [string | Plugin],\r\n};\r\n\r\nexport default class Markplus {\r\n    static from = (content: string | [string], name?: string, opts?: Options): Promise<Markplus> => new Promise((resolve, reject) => {\r\n        const lines = content instanceof Array ? content : content.split(content.endsWith('\\r\\n') ? '\\r\\n' : '\\n');\r\n        const elements = Parser.parse(lines);\r\n        resolve(new Markplus(elements, name || '', opts || {}));\r\n    });\r\n\r\n    constructor(elements: [Types.Element], name: string, opts: Options) {\r\n        this.elements = elements;\r\n        this.name = name;\r\n\r\n        this.plugin = (() => {\r\n            const pluginNames = new Set();\r\n            const plugins = [...corePlugins, ...opts.plugin || []].map(payload => {\r\n                const plugin: Plugin = payload instanceof Function ? payload : require(`markplus-plugin-${payload}`).default;\r\n                const name = plugin.name;\r\n                if (!name) {\r\n                    throw new Error('Invalid plugin.');\r\n                }\r\n                if (pluginNames.has(name)) {\r\n                    console.warn(new Error(`plugin name (${name}) conflict.`).stack.replace(/^Error/, 'Warning')); // eslint-disable-line no-console\r\n                }\r\n                pluginNames.add(name);\r\n                return plugin;\r\n            }).map(plugin => plugin(this));\r\n            return (action: string): string => plugins.map(p => p[action] && p[action]()).filter(code => code != null);\r\n        })();\r\n    }\r\n\r\n    code = () => ([\r\n        '\\n/* code */\\n',\r\n        ...this.plugin('code'),\r\n        '\\n/* dump */\\n',\r\n        ...this.plugin('dump'),\r\n    ].join('\\n'));\r\n}\r\n"]}