{"version":3,"sources":["../src/core.js"],"names":["Types","RenderCode","readFileSync","join","__dirname","plugins","self","name","firstH1","elements","find","ele","Header","level","content","dump","names","Set","use","plugin","has","console","warn","Error","stack","replace","add","push","Markplus","map","from","Promise","resolve","reject","lines","Array","split","endsWith","parse","code","filter"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;IAAoBA,K;;;;;;;;;;AAEpB,IAAMC,aAAa,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,oBAArB,CAAhB,EAA4D,OAA5D,CAAnB;;AAEA,IAAMC,UAAU,CACZ,UAACC,IAAD,EAAoB;AAChB,QAAI,CAACA,KAAKC,IAAV,EAAgB;AACZ,YAAMC,UAAwBF,KAAKG,QAAL,CAAcC,IAAd,CAAmB;AAAA,mBAAOC,eAAeX,MAAMY,MAArB,IAA+BD,IAAIE,KAAJ,IAAa,CAAnD;AAAA,SAAnB,CAA9B;AACAP,aAAKC,IAAL,GAAYC,gBAAcA,QAAQM,OAAlC;AACH;AACD,WAAO;AACHC,cAAM;AAAA,8CAA8BT,KAAKC,IAAnC;AAAA;AADH,KAAP;AAGH,CATW,CAAhB;AAWA,IAAMS,QAAQ,IAAIC,GAAJ,EAAd;AACO,IAAMC,oBAAM,SAANA,GAAM,CAACX,IAAD,EAAeY,MAAf,EAA6F;AAC5G,QAAIH,MAAMI,GAAN,CAAUb,IAAV,CAAJ,EAAqB;AACjBc,gBAAQC,IAAR,CAAa,IAAIC,KAAJ,mBAA0BhB,IAA1B,kBAA6CiB,KAA7C,CAAmDC,OAAnD,CAA2D,QAA3D,EAAqE,SAArE,CAAb,EADiB,CAC8E;AAClG;AACDT,UAAMU,GAAN,CAAUnB,IAAV;AACAF,YAAQsB,IAAR,CAAaR,MAAb;AACH,CANM;;IAQcS,Q,GAOjB,kBAAYnB,QAAZ,EAAuCF,IAAvC,EAAsD;AAAA;;AAAA;;AAAA;;AAClD,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKF,OAAL,GAAeA,QAAQwB,GAAR,CAAY;AAAA,eAAUV,aAAV;AAAA,KAAZ,CAAf;AACH,C;;AAXgBS,Q,CACVE,I,GAAO,UAAChB,OAAD;AAAA,WAAmD,IAAIiB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9F,YAAMC,QAAQpB,mBAAmBqB,KAAnB,GAA2BrB,OAA3B,GAAqCA,QAAQsB,KAAR,CAActB,QAAQuB,QAAR,CAAiB,MAAjB,IAA2B,MAA3B,GAAoC,IAAlD,CAAnD;AACA,YAAM5B,WA3BMT,KA2BK,SAAOsC,KAAP,CAAaJ,KAAb,CAAjB;AACAF,gBAAQ,IAAIJ,QAAJ,CAAanB,QAAb,CAAR;AACH,KAJgE,CAAnD;AAAA,C;;;;;SAYd8B,I,GAAO;AAAA,eAAO,CACVtC,UADU,4BAEP,OAAKQ,QAAL,CAAcoB,GAAd,CAAkB;AAAA,mBAAOlB,IAAII,IAAJ,EAAP;AAAA,SAAlB,CAFO,sBAGP,OAAKV,OAAL,CAAawB,GAAb,CAAiB;AAAA,mBAAUV,OAAOJ,IAAP,IAAeI,OAAOJ,IAAP,EAAzB;AAAA,SAAjB,EAAyDyB,MAAzD,CAAgE;AAAA,mBAAQD,IAAR;AAAA,SAAhE,CAHO,GAIZpC,IAJY,CAIP,IAJO,CAAP;AAAA,K;;;kBAbUyB,Q","file":"core.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\n\r\nimport Parser, * as Types from './Parser';\r\n\r\nconst RenderCode = fs.readFileSync(path.join(__dirname, './../src/Render.js'), 'utf-8');\r\n\r\nconst plugins = [\r\n    (self: Markplus) => {\r\n        if (!self.name) {\r\n            const firstH1: Types.Header = self.elements.find(ele => ele instanceof Types.Header && ele.level == 1);\r\n            self.name = firstH1 && `${firstH1.content}`;\r\n        }\r\n        return {\r\n            dump: () => `export const name = '${self.name}';`,\r\n        };\r\n    },\r\n];\r\nconst names = new Set();\r\nexport const use = (name: string, plugin: (self: Markplus) => { dump: () => string, compile: () => string }) => {\r\n    if (names.has(name)) {\r\n        console.warn(new Error(`plugin name (${name}) conflict.`).stack.replace(/^Error/, 'Warning')); // eslint-disable-line no-console\r\n    }\r\n    names.add(name);\r\n    plugins.push(plugin);\r\n};\r\n\r\nexport default class Markplus {\r\n    static from = (content: string | [string]): Promise<Markplus> => new Promise((resolve, reject) => {\r\n        const lines = content instanceof Array ? content : content.split(content.endsWith('\\r\\n') ? '\\r\\n' : '\\n');\r\n        const elements = Parser.parse(lines);\r\n        resolve(new Markplus(elements));\r\n    });\r\n\r\n    constructor(elements: [Types.Element], name?: string) {\r\n        this.elements = elements;\r\n        this.name = name;\r\n        this.plugins = plugins.map(plugin => plugin(this));\r\n    }\r\n\r\n    code = () => ([\r\n        RenderCode,\r\n        ...this.elements.map(ele => ele.dump()),\r\n        ...this.plugins.map(plugin => plugin.dump && plugin.dump()).filter(code => code),\r\n    ].join('\\n'));\r\n}\r\n"]}