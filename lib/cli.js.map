{"version":3,"sources":["../src/cli.js"],"names":["babel","babelrc","JSON","parse","readFileSync","join","__dirname","launch","name","transform","code","plugins","filename","compile","input","args","Error","from","then","mp","plugin","js","out","writeFileSync","output","console","log","catch","error","version","usage","forEach","option","process","argv"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMC,UAAUC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAAhB,EAAuD,OAAvD,CAAX,CAAhB;AACA,IAAMC,SAAS,SAATA,MAAS;AAAA,kEAA6DC,IAA7D;AAAA,CAAf;AACA;;AAEA,IAAMC,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOF,IAAP;AAAA,WAAgBR,MAAMS,SAAN,CAAgBC,IAAhB,eAA2BT,OAA3B,IAAoCU,SAAS,CAAC,8BAAD,CAA7C,EAA+EC,UAAUJ,IAAzF,IAAhB;AAAA,CAAlB;;AAEA,IAAMK,UAAU,SAAVA,OAAU,GAAM;AAClB,QAAMC,QAAQ,oBAAUC,IAAV,CAAe,CAAf,CAAd,CADkB,CACe;AACjC,QAAI,CAACD,KAAL,EAAY;AACR,cAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;AACH;AACD,mBAASC,IAAT,CAAc,aAAGb,YAAH,CAAgBU,KAAhB,EAAuB,OAAvB,CAAd,EACKI,IADL,CACU;AAAA,4BAAYC,EAAZ,IAAgBT,MAAMS,GAAGT,IAAH,EAAtB;AAAA,KADV,EAEKQ,IAFL,CAEU;AAAA,eAAM,oBAAUT,SAAV,gBAA4BU,EAA5B,EAAmCV,UAAUU,GAAGT,IAAb,EAAmBS,GAAGX,IAAtB,CAAnC,IAAoEW,EAA1E;AAAA,KAFV,EAGKD,IAHL,CAGU;AAAA,YAAGR,IAAH,QAAGA,IAAH;AAAA,YAASF,IAAT,QAASA,IAAT;AAAA,YAAeY,MAAf,QAAeA,MAAf;AAAA,eAA4B,oBAAUC,EAAV,GAAeX,IAAf,GAAsB,6BACjDU,OAAO,MAAP,CADiD,mBAEvCV,IAFuC,kBAGpDH,OAAOC,IAAP,CAHoD,EAIpD,EAJoD,GAKtDH,IALsD,CAKjD,IALiD,CAAlD;AAAA,KAHV,EASKa,IATL,CASU,kBAAU;AACZ,4BAAUI,GAAV,GACI,aAAGC,aAAH,CAAiB,oBAAUD,GAA3B,EAAgCE,MAAhC,EAAwC,OAAxC,CADJ,GAEMC,QAAQC,GAAR,CAAYF,MAAZ,CAFN,CADY,CAGe;AAC9B,KAbL,EAaOG,KAbP,CAaaF,QAAQG,KAbrB,EALkB,CAkBW;AAChC,CAnBD;;AAqBA,oBAAUC,OAAV,CAAkB,kBAAIA,OAAtB,EAA+BC,KAA/B,CAAqC,sBAArC;AACA,CACI,CAAC,QAAD,EAAW,iBAAX,CADJ,EAEI,CAAC,MAAD,EAAS,uBAAT,CAFJ,EAGI,CAAC,kBAAD,EAAqB,iCAArB,CAHJ,EAII,CAAC,gBAAD,EAAmB,2BAAnB,CAJJ,EAKEC,OALF,CAKU;AAAA;AAAA,QAAKhB,IAAL;;AAAA,WAAe,oBAAUiB,MAAV,+CAAoBjB,IAApB,EAAf;AAAA,CALV;AAMA,oBAAUZ,KAAV,CAAgB8B,QAAQC,IAAxB;;AAEArB","file":"cli.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport * as babel from 'babel-core';\r\nimport commander from 'commander';\r\n\r\nimport pkg from './../package.json';\r\nimport Markplus, { use } from './core';\r\nimport PluginStyleDefault from './plugin/style-default';\r\n\r\nconst babelrc = JSON.parse(fs.readFileSync(path.join(__dirname, './../.babelrc'), 'utf-8'));\r\nconst launch = name => `<div id=\"markplus\" class=\"Markplus\"></div><script>${name}.default(document.querySelector('#markplus'));</script>`;\r\nuse(PluginStyleDefault);\r\n\r\nconst transform = (code, name) => babel.transform(code, { ...babelrc, plugins: ['transform-es2015-modules-umd'], filename: name });\r\n\r\nconst compile = () => {\r\n    const input = commander.args[0]; // eslint-disable-line no-console\r\n    if (!input) {\r\n        throw new Error('missing input file.');\r\n    }\r\n    Markplus.from(fs.readFileSync(input, 'utf-8'))\r\n        .then(mp => ({ ...mp, code: mp.code() }))\r\n        .then(mp => commander.transform ? ({ ...mp, ...transform(mp.code, mp.name) }) : mp)\r\n        .then(({ code, name, plugin }) => commander.js ? code : [\r\n            ...plugin('head'),\r\n            `<script>\\n${code}\\n</script>`,\r\n            launch(name),\r\n            '',\r\n        ].join('\\n'))\r\n        .then(output => {\r\n            commander.out ?\r\n                fs.writeFileSync(commander.out, output, 'utf-8')\r\n                : console.log(output); // eslint-disable-line no-console\r\n        }).catch(console.error); // eslint-disable-line no-console\r\n};\r\n\r\ncommander.version(pkg.version).usage('[options] <file ...>');\r\n[\r\n    ['--html', 'Compile to html'],\r\n    ['--js', 'Compile to javascript'],\r\n    ['-o, --out [file]', 'Write the output into the file.'],\r\n    ['--no-transform', 'With out babel transform.'],\r\n].forEach(([...args]) => commander.option(...args));\r\ncommander.parse(process.argv);\r\n\r\ncompile();\r\n"]}