{"version":3,"sources":["../src/test.js"],"names":["console","log","map","expr","replace","exprs","reduce","v","f","forEach","index","ele","Function","pipe","Error","line","HTMLElement"],"mappings":";;AAAA;;;;;;;;AAEAA,QAAQC,GAAR,CAAY,wBAAZ;AACA,CACI,CACI,mBADJ,EAEI,eAFJ,EAGI,cAHJ,EAII,UAJJ,EAMKC,GANL,CAMS;AAAA,WAAQC,KAAKC,OAAL,CAAa,SAAb,EAAwB,4BAAxB,CAAR;AAAA,CANT,EAOKF,GAPL,CAOS;AAAA,WAAWC,IAAX;AAAA,CAPT,CADJ,EASI,UAACE,KAAD;AAAA,wCACOA,MAAMH,GAAN,CAAU;AAAA,eAAQC,KAAKC,OAAL,CAAa,KAAb,EAAoB,KAApB,CAAR;AAAA,KAAV,CADP,sBAEOC,MAAMH,GAAN,CAAU;AAAA,eAAQC,KAAKC,OAAL,CAAa,KAAb,EAAoB,OAApB,CAAR;AAAA,KAAV,CAFP,sBAGOC,MAAMH,GAAN,CAAU;AAAA,eAAQC,KAAKC,OAAL,CAAa,KAAb,EAAoB,IAApB,CAAR;AAAA,KAAV,CAHP,sBAIOC,MAAMH,GAAN,CAAU;AAAA,eAAQC,KAAKC,OAAL,CAAa,KAAb,EAAoB,MAApB,CAAR;AAAA,KAAV,CAJP,sBAKOC,MAAMH,GAAN,CAAU;AAAA,eAAQC,KAAKC,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAR;AAAA,KAAV,CALP,IAMIC,MAAM,CAAN,EAASD,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CANJ;AAAA,CATJ,EAiBI,UAACC,KAAD;AAAA,wCACOA,MAAMH,GAAN,CAAU;AAAA,eAAQC,KAAKC,OAAL,CAAa,OAAb,EAAsB,cAAtB,CAAR;AAAA,KAAV,CADP,sBAEOC,MAAMH,GAAN,CAAU;AAAA,eAAQC,KAAKC,OAAL,CAAa,OAAb,EAAsB,cAAtB,CAAR;AAAA,KAAV,CAFP;AAAA,CAjBJ,EAqBEE,MArBF,CAqBS,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,EAAED,CAAF,CAAV;AAAA,CArBT,EAqByBE,OArBzB,CAqBiC,UAACN,IAAD,EAAOO,KAAP,EAAiB;AAC9C,QAAMC,MAAM,iBAAOC,QAAP,CAAgBC,IAAhB,CAAqBV,IAArB,EAA2BO,KAA3B,CAAZ;AACA,QAAIC,GAAJ,EAAS;AACLX,gBAAQC,GAAR,CAAYU,GAAZ;AACA;AACH;AACD,UAAM,IAAIG,KAAJ,CAAUX,IAAV,CAAN;AACH,CA5BD;AA6BAH,QAAQC,GAAR;;AAEAD,QAAQC,GAAR,CAAY,2BAAZ;AACA,CACI,YADJ,EAEI,iBAFJ,EAGEQ,OAHF,CAGU,UAACM,IAAD,EAAOL,KAAP,EAAiB;AACvB,QAAMC,MAAM,iBAAOK,WAAP,CAAmBH,IAAnB,CAAwBE,IAAxB,EAA8BL,KAA9B,CAAZ;AACA,QAAIC,GAAJ,EAAS;AACLX,gBAAQC,GAAR,CAAYU,GAAZ;AACA;AACH;AACD,UAAM,IAAIG,KAAJ,CAAUC,IAAV,CAAN;AACH,CAVD;AAWAf,QAAQC,GAAR","file":"test.js","sourcesContent":["import Parser from './Parser';\r\n\r\nconsole.log('check Parser.Function:');\r\n[\r\n    [\r\n        'IDENT(...) /N ...',\r\n        'IDENT(...) /N',\r\n        'IDENT /N ...',\r\n        'IDENT /N',\r\n    ]\r\n        .map(expr => expr.replace(/\\.\\.\\./g, 'a, b, /* (comments) */...c'))\r\n        .map(expr => `${expr} // (comments)`),\r\n    (exprs: [string]) => ([\r\n        ...exprs.map(expr => expr.replace(' /N', ' /3')),\r\n        ...exprs.map(expr => expr.replace(' /N', ' /:30')),\r\n        ...exprs.map(expr => expr.replace(' /N', '/3')),\r\n        ...exprs.map(expr => expr.replace(' /N', '/:30')),\r\n        ...exprs.map(expr => expr.replace(' /N', '')),\r\n        exprs[2].replace(' /N', '/'),\r\n    ]),\r\n    (exprs: [string]) => ([\r\n        ...exprs.map(expr => expr.replace('IDENT', '$_ident.name')),\r\n        ...exprs.map(expr => expr.replace('IDENT', '#_ident.name')),\r\n    ]),\r\n].reduce((v, f) => f(v)).forEach((expr, index) => {\r\n    const ele = Parser.Function.pipe(expr, index);\r\n    if (ele) {\r\n        console.log(ele);\r\n        return;\r\n    }\r\n    throw new Error(expr);\r\n});\r\nconsole.log();\r\n\r\nconsole.log('check Parser.HTMLElement:');\r\n[\r\n    '# Header01',\r\n    '###### Header06',\r\n].forEach((line, index) => {\r\n    const ele = Parser.HTMLElement.pipe(line, index);\r\n    if (ele) {\r\n        console.log(ele);\r\n        return;\r\n    }\r\n    throw new Error(line);\r\n});\r\nconsole.log();\r\n"]}